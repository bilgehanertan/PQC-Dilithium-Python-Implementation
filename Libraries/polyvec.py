# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ogWnXdSA29cNk2MEnEJxBuhC0Z_mNC70
"""

# -*- coding: utf-8 -*-
DILITHIUM_MODE = 2
from params import *
from poly import *
import numpy as np
class polyvecLstruct:
    def __init__(self,vec):
        self.poly.vec[K]# Poly Lib Implement vector poly vec[L]
        
class polyvecKstruct:
    def __init__(self,vec):
        self.poly.vec[K]# Poly Lib Implement vector poly vec[L]
                
"""
/*************************************************
* Name:        expand_mat
*
* Description: Implementation of ExpandA. Generates matrix A with uniformly
*              random coefficients a_{i,j} by performing rejection
*              sampling on the output stream of SHAKE128(rho|j|i)
*              or AES256CTR(rho,j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
"""        
def polyvec_matrix_expand(polyvecL, rho_SEEDBYTES_ELEMENT):
                                                           
    for i in range(K):  #K=4
        for j in range(L): #L=4
            print("a")
            poly_uniform(mat[i].vec[j], rho, (i << 8) + j); # to be implemented
        
    
def polyvec_matrix_pointwise_montgomery(polyvecK, polyvecL, polyvecL2):
    for i in range(K): # K = 4
        polyvec_matrix_pointwise_montgomery(polyvecK.poly.vec[i], polyvecL.poly.vec[i], polyvecL2)
        
    """ /**************************************************************/
/************ Vectors of polynomials of length L **************/
/**************************************************************/"""
    
def polyvecl_uniform_eta(polyvecL,seed,nonce): # pass seed[SEEDBYTES]
    for i in range(L):
         nonce = nonce +1
         poly_uniform_eta(polyvecL.poly.vec[i],seed[SEEDBYTES],nonce) #nonce++ normali

     

def polyvecl_uniform_gamma1(polyvec, seed, nonce):
    for i in range (L):
        poly_uniform_gamma1(polyVecL.poly.vec[i],seed[SEEDBYTES],L*nonce+i)
        

def polyvecl_reduce(polyvecL):
    for i in range (L):
        poly_reduce(polyvecL.poly.vec[i])
        
        
        """/*************************************************
* Name:        polyvecl_freeze
*
* Description: Reduce coefficients of polynomials in vector of length L
*              to standard representatives.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/ """


def polyvecl_freeze(polyvecL):
    for i in range (L):
        poly_freeze(polyvecL.poly.vec[i])
        
        

"""/*************************************************
* Name:        polyvecl_add
*
* Description: Add vectors of polynomials of length L.
*              No modular reduction is performed.
*
* Arguments:   - polyvecl *w: pointer to output vector
*              - const polyvecl *u: pointer to first summand
*              - const polyvecl *v: pointer to second summand
**************************************************/"""

def polyvecl_add(polyvecl_w, polyvecl_u, polyvecl_v):
    for i in range (L):
        poly_add(polyvecl_w.poly.vec[i],polyvecl_u.poly.vec[i],polyvecl_v.poly.vec[i]) # to be implemented



""" /*************************************************
* Name:        polyvecl_ntt
*
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/"""


def polyvecl_ntt(polyvecl_v):
    for i in range (L):
        poly_ntt(polyvecl_v.poly.vec[i])

def polyvecl_invntt_tomont(polyvecl_v):
    for i in range(L):
        poly_invntt_tomont(polyvecl_v.poly.vec[i])
        
def polyvecl_pointwise_poly_montgomery(polyvecl_r,poly_a,polyvecl_v):
    for i in range(L):
        poly_pointwise_montgomery(polyvecl_r.poly.vec[i],poly_a,polyvecl_v.poly.vec[i])

""" /*************************************************
* Name:        polyvecl_pointwise_acc_montgomery
*
* Description: Pointwise multiply vectors of polynomials of length L, multiply
*              resulting vector by 2^{-32} and add (accumulate) polynomials
*              in it. Input/output vectors are in NTT domain representation.
*
* Arguments:   - poly *w: output polynomial
*              - const polyvecl *u: pointer to first input vector
*              - const polyvecl *v: pointer to second input vector
**************************************************/"""

def polyvecl_pointwise_acc_montgomery(poly_w, polyvecl_u, polyvecl_v):
    poly_pointwise_montogomery(w, polyvecl_u.poly.vec[0], polyvecl_v.poly.vec[0])
    for i in range(1,L):
        poly_pointwise_montgomery(t, polyvecl_u.poly.vec[i], polyvecl_v.poly.vec[i])
        poly_add(poly_w, poly_w, poly_t)
   

""" /*************************************************
* Name:        polyvecl_chknorm
*
* Description: Check infinity norm of polynomials in vector of length L.
*              Assumes input polyvecl to be reduced by polyvecl_reduce().
*
* Arguments:   - const polyvecl *v: pointer to vector
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/ """

def polyvecL_chknorm(polyvecL, bound):
    for i in range(L):
        if (poly_chknorm(polyvecl_v.poly.vec[i], bound)):
          return 1
    return 0
            
            
"""
/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/"""
            
def polyveck_uniform_eta(polyveck_v, seed, nonce):
    for i in range(L):
        poly_uniform_eta(polyveck_v.poly.vec[i], seed, K*nonce+i) #nonce++ normali
            
"""/*************************************************
* Name:        polyveck_reduce
*
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/"""
            
def polyveck_reduce(polyveck_v):
    for i in range(K):
        poly_reduce(polyveck_v.poly.vec[i])
            
"""/*************************************************
* Name:        polyveck_caddq
*
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/"""
         
def polyveck_caddq(polyveck_v):
    for i in range(K):
        poly.caddq(polyveck_v.poly.vec[i])
            
            
            
"""/*************************************************
* Name:        polyveck_freeze
*
* Description: Reduce coefficients of polynomials in vector of length K
*              to standard representatives.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/"""
            
def polyveck_freeze(polyeck_v):
    for i in range(K):
        poly_freeze(polyveck_v.poly.vec[i])
            
"""/*************************************************
* Name:        polyveck_add
*
* Description: Add vectors of polynomials of length K.
*              No modular reduction is performed.
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/"""
            
def polyveck_add(polyveck_w, polyveck_u, polyveck_v):
  for i in range(K):
    poly.add(polyveck_w.poly.vec[i], polyveck_v.poly.vec[i])

"""/*************************************************
* Name:        polyveck_sub
*
* Description: Subtract vectors of polynomials of length K.
*              No modular reduction is performed.
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/"""

def polyveck_sub(polyveck_w, polyveck_u, polveck_v):
  for i in range(K):
    poly_sub(polyveck_w.poly.vec[i], polyveck_u.poly.vec[i], polyveck_v.poly.vec[i])

"""   /*************************************************
* Name:        polyveck_shiftl
*
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/"""

def polyveck_shiftl(polyveck_v):
  for i in range(K):
    poly_shift(polyveck_v.poly.vec[i])



"""/*************************************************
* Name:        polyveck_ntt
*
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/"""

def polyveck_ntt(polyveck_v):
  for i in range(K):
    poly_ntt(polyveck_v.poly.vec[i])


"""/*************************************************
* Name:        polyveck_invntt_tomont
*
* Description: Inverse NTT and multiplication by 2^{32} of polynomials
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/"""

def polyveck_invntt_tomont(polyveck_v):
  for i in range(K):
    poly_invntt_tomont(polyveck_v.poly.vec[i])

def polyveck_pointwise_poly_montgomery(polyveck_r, poly_a, polyveck_v):
  for i in range(K):
    poly_pointwise_montogomery(polyveck_r.poly.vec[i], poly_a, polyveck_v.poly.vec[i])



"""/*************************************************
* Name:        polyveck_chknorm
*
* Description: Check infinity norm of polynomials in vector of length K.
*              Assumes input polyveck to be reduced by polyveck_reduce().
*
* Arguments:   - const polyveck *v: pointer to vector
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/"""

def polyveck_chknorm(polyveck_v, bound):
  for i in range(K):
    if (poly_chknorm(polyveck_v.poly.vec[i], bound)):
      return 1
  return 0


"""/*************************************************
* Name:        polyveck_power2round
*
* Description: For all coefficients a of polynomials in vector of length K,
*              compute a0, a1 such that a mod^+ Q = a1*2^D + a0
*              with -2^{D-1} < a0 <= 2^{D-1}. Assumes coefficients to be
*              standard representatives.
*
* Arguments:   - polyveck *v1: pointer to output vector of polynomials with
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/"""

def polyveck_power2round(polyveck_v1, polyveck_v0, polyveck_v):
  for i in range(K):
    poly_power2round(polyveck_v1.poly.vec[i], polyveck_v0.poly.vec[i], polyveck_v.poly.vec[i])

"""/*************************************************
* Name:        polyveck_decompose
*
* Description: For all coefficients a of polynomials in vector of length K,
*              compute high and low bits a0, a1 such a mod^+ Q = a1*ALPHA + a0
*              with -ALPHA/2 < a0 <= ALPHA/2 except a1 = (Q-1)/ALPHA where we
*              set a1 = 0 and -ALPHA/2 <= a0 = a mod Q - Q < 0.
*              Assumes coefficients to be standard representatives.
*
* Arguments:   - polyveck *v1: pointer to output vector of polynomials with
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/"""

def polyveck_decompose(polyveck_v1, polyveck_v0, polyveck_v):
  for i in range(K):
    poly_decompose(polyveck_v1.poly.vec[i], polyveck_v0.poly.vec[i], polyveck_v.poly.vec[i])

"""/*************************************************
* Name:        polyveck_make_hint
*
* Description: Compute hint vector.
*
* Arguments:   - polyveck *h: pointer to output vector
*              - const polyveck *v0: pointer to low part of input vector
*              - const polyveck *v1: pointer to high part of input vector
*
* Returns number of 1 bits.
**************************************************/"""

def polyveck_make_hint(polyveck_h, polyveck_v0, polyveck_v1):
  s=0 
  for i in range(K):
    s += poly_make_hint(polyveck_h.poly.vec[i], polyveck_v0.poly.vec[i], polyveck_v1.poly.vec[i])
  return s

"""/*************************************************
* Name:        polyveck_use_hint
*
* Description: Use hint vector to correct the high bits of input vector.
*
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/"""

def polyveck_use_hint(polyveck_w, polyveck_u, polyveck_h):
  for i in range(K):
    poly_use_hint(polyveck_w.poly.vec[i], polyveck_u.poly.vec[i], polyveck_h.poly.vec[i])

def polyveck_pack_w1(r[K*POLYW1_PACKEDBYTES], polyveck_w1): #rr[K*POLYW1_PACKEDBYTES] hata verdi
  for i in range(K):
    polyw1_pack(r[POLYW1_PACKEDBYTES], polyveck_w1.poly.vec[i])
